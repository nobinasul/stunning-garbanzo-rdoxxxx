name: Windows RDP via Tailscale

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: "Tailscale tailnet (e.g. you@gmail.com)"
        required: true
      ts_api_key:
        description: "Tailscale API key (device admin, no 'Bearer')"
        required: true
      ts_authkey:
        description: "Tailscale auth key (reusable or ephemeral)"
        required: true
      gh_api_token:
        description: "GitHub Personal Access Token (classic; scopes: repo, workflow)"
        required: true
      telegram_bot_token:
        description: "Telegram Bot Token"
        required: false
      telegram_chat_id:
        description: "Telegram Chat ID"
        required: false
      test_mode:
        description: "Run 5-minute test loop"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime in minutes (max 360)"
        required: false
        default: "60"

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

env:
  RDP_USER: adi
  RDP_PASS: adi@500
  TS_HOSTNAME: adi

jobs:
  rdp:
    runs-on: windows-2022
    timeout-minutes: 370
    steps:
      - name: üîß Resolve inputs (safe)
        id: cfg
        env:
          RAW_TAILNET:  ${{ inputs.ts_tailnet }}
          RAW_APIKEY:   ${{ inputs.ts_api_key }}
          RAW_AUTHKEY:  ${{ inputs.ts_authkey }}
          RAW_PAT:      ${{ inputs.gh_api_token }}
          RAW_TELEGRAM_BOT: ${{ inputs.telegram_bot_token }}
          RAW_TELEGRAM_CHAT: ${{ inputs.telegram_chat_id }}
          RAW_TEST:     ${{ inputs.test_mode == true && 'true' || 'false' }}
          RAW_RUNTIME:  ${{ inputs.runtime_minutes || '60' }}
        run: |
          function ToIntOr($v, $def){ if("$v" -match '^\d+$'){[int]$v}else{[int]$def} }

          $tailnet = $env:RAW_TAILNET
          $apiKey  = $env:RAW_APIKEY
          $authKey = $env:RAW_AUTHKEY
          $pat     = $env:RAW_PAT
          $telegramBot = $env:RAW_TELEGRAM_BOT
          $telegramChat = $env:RAW_TELEGRAM_CHAT
          
          if (-not $tailnet -or -not $apiKey -or -not $authKey -or -not $pat) {
            Write-Error "Missing required inputs"; exit 1
          }

          # Robust boolean
          $isTest = ($env:RAW_TEST -match '^(?i:true|1|yes|on)$')

          $runtime = ToIntOr $env:RAW_RUNTIME 60
          if ($isTest) { $runtime = 5 }
          if ($runtime -gt 360) { $runtime = 360 }

          "tailnet=$tailnet" | Out-File -Append $env:GITHUB_OUTPUT
          "apikey=$apiKey"   | Out-File -Append $env:GITHUB_OUTPUT
          "authkey=$authKey" | Out-File -Append $env:GITHUB_OUTPUT
          "pat=$pat"         | Out-File -Append $env:GITHUB_OUTPUT
          "telegram_bot=$telegramBot" | Out-File -Append $env:GITHUB_OUTPUT
          "telegram_chat=$telegramChat" | Out-File -Append $env:GITHUB_OUTPUT
          "runtime=$runtime" | Out-File -Append $env:GITHUB_OUTPUT
          "test_mode=$isTest" | Out-File -Append $env:GITHUB_OUTPUT
          Write-Host "Resolved: test=$isTest, runtime=$runtime, telegram=$(if($telegramBot){'enabled'}else{'disabled'})"

      - name: üì± Send Telegram notification (start)
        if: steps.cfg.outputs.telegram_bot != '' && steps.cfg.outputs.telegram_chat != ''
        run: |
          $botToken = "${{ steps.cfg.outputs.telegram_bot }}"
          $chatId = "${{ steps.cfg.outputs.telegram_chat }}"
          $message = "üöÄ RDP Session Started`n`n‚è∞ Runtime: ${{ steps.cfg.outputs.runtime }} minutes`nüîß Test Mode: ${{ steps.cfg.outputs.test_mode }}`n`nYou'll get connection details soon..."
          
          $url = "https://api.telegram.org/bot$botToken/sendMessage"
          $body = @{
            chat_id = $chatId
            text = $message
            parse_mode = "Markdown"
          } | ConvertTo-Json
          
          try {
            Invoke-RestMethod -Uri $url -Method Post -ContentType "application/json" -Body $body
            Write-Host "Telegram start notification sent"
          } catch {
            Write-Warning "Failed to send Telegram notification: $_"
          }

      - name: ‚öôÔ∏è Install Tailscale (if missing) & show version
        run: |
          $exe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            $url = 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe'
            $dst = "$env:TEMP\tailscale-setup.exe"
            Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
            Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & "C:\Program Files\Tailscale\tailscale.exe" version

      - name: üîê Enable RDP user + firewall
        run: |
          $u="${{ env.RDP_USER }}"; $p="${{ env.RDP_PASS }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      - name: üßπ PURGE any devices containing 'adi' (startup)
        run: |
          $hdr = @{ Authorization = "Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn  = [uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $match = { param($d)
            ($d.name -match '(?i)adi') -or ($d.hostname -match '(?i)adi') -or ($d.DNSName -match '(?i)adi')
          }
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if (& $match $d) {
                try {
                  Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null
                  Write-Host "Deleted at start: $($d.name)"
                } catch {}
              }
            }
          } catch { Write-Warning "Startup purge failed: $_" }

      - name: üîó Tailscale up (hostname=adi) + show IP/FQDN/DERP
        id: up
        run: |
          $ts = "C:\Program Files\Tailscale\tailscale.exe"
          & $ts logout | Out-Null
          & $ts up --authkey "${{ steps.cfg.outputs.authkey }}" --hostname "${{ env.TS_HOSTNAME }}" --accept-routes --accept-dns=false
          Start-Sleep -Seconds 2

          $ip4 = (& $ts ip -4 | Select-Object -First 1)
          $status = & $ts status --json | ConvertFrom-Json
          $fqdn = $status.Self.DNSName
          $derp = $status.Self.DERP
          "ip4=$ip4"   | Out-File -Append $env:GITHUB_OUTPUT
          "fqdn=$fqdn" | Out-File -Append $env:GITHUB_OUTPUT
          "derp=$derp" | Out-File -Append $env:GITHUB_OUTPUT

          "### RDP (Adi)`nHost: $env:TS_HOSTNAME`nIPv4: $ip4`nMagicDNS: $fqdn`nDERP: $derp`nUser: $env:RDP_USER`nPass: $env:RDP_PASS" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

      - name: üì± Send Telegram connection info
        if: steps.cfg.outputs.telegram_bot != '' && steps.cfg.outputs.telegram_chat != ''
        run: |
          $botToken = "${{ steps.cfg.outputs.telegram_bot }}"
          $chatId = "${{ steps.cfg.outputs.telegram_chat }}"
          $message = "üîó *RDP Connection Ready*`n`nüåê *Host:* ${{ steps.up.outputs.fqdn }}`nüìç *IP:* ${{ steps.up.outputs.ip4 }}`n‚ö° *DERP:* ${{ steps.up.outputs.derp }}`nüë§ *User:* ${{ env.RDP_USER }}`nüîí *Pass:* ${{ env.RDP_PASS }}`n‚è∞ *Duration:* ${{ steps.cfg.outputs.runtime }} minutes`n`n_Use Tailscale client to connect_"
          
          $url = "https://api.telegram.org/bot$botToken/sendMessage"
          $body = @{
            chat_id = $chatId
            text = $message
            parse_mode = "Markdown"
          } | ConvertTo-Json
          
          try {
            Invoke-RestMethod -Uri $url -Method Post -ContentType "application/json" -Body $body
            Write-Host "Telegram connection info sent"
          } catch {
            Write-Warning "Failed to send Telegram connection info: $_"
          }

      - name: ‚è≥ Keep alive with Telegram reminders
        id: keepalive
        run: |
          $mins=[int]"${{ steps.cfg.outputs.runtime }}"
          $end=(Get-Date).AddMinutes($mins)
          $lastReminder = $null
          $reminderInterval = 30 # minutes (shorter reminders)
          
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            
            # Send periodic Telegram reminders
            $currentTime = Get-Date
            if ($lastReminder -eq $null -or ($currentTime - $lastReminder).TotalMinutes -ge $reminderInterval) {
              if ("${{ steps.cfg.outputs.telegram_bot }}" -ne "" -and "${{ steps.cfg.outputs.telegram_chat }}" -ne "") {
                $botToken = "${{ steps.cfg.outputs.telegram_bot }}"
                $chatId = "${{ steps.cfg.outputs.telegram_chat }}"
                $message = "‚è∞ *RDP Session Reminder*`n`nüïê Time: $($currentTime.ToString('HH:mm'))`n‚è≥ Time left: $left minutes`nüåê Host: ${{ steps.up.outputs.fqdn }}`n`n_Session will end automatically_"
                
                $url = "https://api.telegram.org/bot$botToken/sendMessage"
                $body = @{
                  chat_id = $chatId
                  text = $message
                  parse_mode = "Markdown"
                } | ConvertTo-Json
                
                try {
                  Invoke-RestMethod -Uri $url -Method Post -ContentType "application/json" -Body $body
                  Write-Host "Telegram reminder sent ($left min left)"
                } catch {
                  Write-Warning "Failed to send Telegram reminder: $_"
                }
              }
              $lastReminder = $currentTime
            }
            
            Start-Sleep -Seconds 60
          }

      - name: üßπ PURGE any devices containing 'adi' (exit)
        if: always()
        run: |
          $hdr = @{ Authorization = "Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn  = [uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $match = { param($d)
            ($d.name -match '(?i)adi') -or ($d.hostname -match '(?i)adi') -or ($d.DNSName -match '(?i)adi')
          }
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if (& $match $d) {
                try {
                  Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null
                  Write-Host "Deleted at exit: $($d.name)"
                } catch {}
              }
            }
          } catch { Write-Warning "Exit purge failed: $_" }

      - name: üì± Send Telegram notification (end)
        if: always() && steps.cfg.outputs.telegram_bot != '' && steps.cfg.outputs.telegram_chat != ''
        run: |
          $botToken = "${{ steps.cfg.outputs.telegram_bot }}"
          $chatId = "${{ steps.cfg.outputs.telegram_chat }}"
          $status = if ("${{ job.status }}" -eq "success") { "‚úÖ Completed" } else { "‚ùå Failed" }
          $message = "üèÅ *RDP Session Ended*`n`nStatus: $status`nDuration: ${{ steps.cfg.outputs.runtime }} minutes`n`n_Thank you for using the service_"
          
          $url = "https://api.telegram.org/bot$botToken/sendMessage"
          $body = @{
            chat_id = $chatId
            text = $message
            parse_mode = "Markdown"
          } | ConvertTo-Json
          
          try {
            Invoke-RestMethod -Uri $url -Method Post -ContentType "application/json" -Body $body
            Write-Host "Telegram end notification sent"
          } catch {
            Write-Warning "Failed to send Telegram end notification: $_"
          }
